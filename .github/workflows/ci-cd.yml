name: CI/CD

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  release:
    types: [created]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11', '3.12', '3.13']
      fail-fast: false

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Cache ffmpeg installation to avoid apt-get update on every run
      - name: Cache ffmpeg
        id: cache-ffmpeg
        uses: actions/cache@v4
        with:
          path: /tmp/ffmpeg-cache
          key: ${{ runner.os }}-ffmpeg-cache-${{ hashFiles('.github/workflows/ci-cd.yml') }}
      
      - name: Install ffmpeg
        # Skip the apt-get update if we got a cache hit
        run: |
          if [ "${{ steps.cache-ffmpeg.outputs.cache-hit }}" != 'true' ]; then
            sudo apt-get update
            mkdir -p /tmp/ffmpeg-cache
            echo "ffmpeg cache created at $(date)" > /tmp/ffmpeg-cache/installed.txt
          fi
          sudo apt-get install -y ffmpeg

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-

      - name: Cache uv
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-${{ matrix.python-version }}-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-uv-${{ matrix.python-version }}-

      - name: Install uv
        run: pip install uv

      - name: Install dependencies
        run: uv sync --extra dev

      - name: Run tests with coverage
        run: uv run pytest --cov=pydub --cov-report=xml

      - name: Generate Coverage Report
        if: matrix.python-version == '3.12'
        run: |
          uv run pytest --cov=pydub --cov-report=term --cov-report=html
          echo "Coverage report generated in htmlcov/ directory"

  deploy:
    needs: test
    if: github.event_name == 'release'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
          
      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-3.10-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-3.10-
            ${{ runner.os }}-pip-

      - name: Cache uv
        uses: actions/cache@v4
        with:
          path: ~/.cache/uv
          key: ${{ runner.os }}-uv-3.10-${{ hashFiles('pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-uv-3.10-

      - name: Install uv
        run: pip install uv

      - name: Install build dependencies
        run: uv sync --extra dev

      - name: Build package
        run: uv run python -m build

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}